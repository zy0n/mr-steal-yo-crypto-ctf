// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity ^0.8.4;

import "hardhat/console.sol";
// pull interface from contract


// okay so heres the plan.
// use spoofed onERC721Received function to jam up the house. 

// make interface for asset wrapper, need wrap function. 

interface IAssetWrapper {
    function wrap(
      uint256 nftId,
      address assetOwner, //@audit - Can this be spoofed?
      address assetAddress
    ) external;
    function unwrap(
        address assetOwner,
        address assetAddress
    ) external;
}



contract GameAssetExploiter {

    address swordAddress;
    address shieldAddress;
    address pwner;

    IAssetWrapper sword;
    IAssetWrapper shield;

    uint256 swordId;
    uint256 shieldId;



    constructor(address _sword, address _shield, uint256 _swordId, uint256 _shieldId){

      sword = IAssetWrapper(_sword);
      shield = IAssetWrapper(_shield);
      swordId = _swordId;
      shieldId = _shieldId;
      pwner = msg.sender;


      pwn();

    }


    function pwn(){

      // call wrapper on this, it should initiate the callback. lets try
      


    }

    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4) {
      // here we can see what we got

      console.log(operator);
      console.log(from);
      console.log(tokenId);

      return bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"));
    }
}